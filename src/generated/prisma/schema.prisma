generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Usuario {
<<<<<<< Updated upstream
  id                   String             @id @default(uuid()) @db.Uuid
  googleId             String?            @unique
  fotoPerfil           String?
  correoElectronico    String             @unique @db.VarChar(255)
  contrasenaHash       String?
  nombreCompleto       String?            @db.VarChar(255)
  telefono             String?            @db.VarChar(20)
  rol                  String             @default("usuario") @db.VarChar(20)
  estadoVerificacion   String             @default("pendiente") @db.VarChar(20)
  refreshToken         String?
  fechaCreacion        DateTime           @default(now()) @db.Timestamp(0)
  fechaActualizacion   DateTime           @updatedAt @db.Timestamp(0)
  busquedasGuardadas   BusquedaGuardada[]
  favoritos            Favorito[]
  inmueblesPropietario Inmueble[]
  Intereses            Interes[]
  mensajesEmitidos     Mensaje[]          @relation("MensajesEmisor")
  mensajesRecibidos    Mensaje[]          @relation("MensajesReceptor")
  notificaciones       Notificacion[]
  reportes             Reporte[]
  resenas              Resena[]
  preferences          UserPreference?    @relation("UserPreferences")
=======
  id                 String   @id @default(uuid()) @db.Uuid
  googleId           String?  @unique
  profilePhoto       String?
  email              String   @unique @db.VarChar(255)
  passwordHash       String?
  fullName           String?  @db.VarChar(255)
  phone              String?  @db.VarChar(20)
  role               String   @default("usuario") @db.VarChar(20) // 'propietario' o 'inquilino'
  verificationStatus String   @default("pendiente") @db.VarChar(20)
  refreshToken       String?
  createdAt          DateTime @default(now()) @db.Timestamp(0)
  updatedAt          DateTime @updatedAt @db.Timestamp(0)

  // Relaciones
  ownedProperties  Inmueble[]
  interests        Interes[]
  sentMessages     Mensaje[]          @relation("MensajesEmisor")
  receivedMessages Mensaje[]          @relation("MensajesReceptor")
  reviews          Resena[]
  notifications    Notificacion[]
  reports          Reporte[]
  favorites        Favorito[]
  savedSearches    BusquedaGuardada[]
>>>>>>> Stashed changes

  @@map("users")
}

model Inmueble {
<<<<<<< Updated upstream
  id                 String         @id @default(uuid()) @db.Uuid
  propietarioId      String         @db.Uuid
  titulo             String         @db.VarChar(255)
  descripcion        String?
  direccion          String?        @db.VarChar(500)
  ciudad             String         @default("Cochabamba") @db.VarChar(100)
  dormitorios        Int?
  banos              Int?
  areaM2             Decimal?       @db.Decimal(10, 2)
  precio             Decimal        @db.Decimal(12, 2)
  tipoOperacion      String         @db.VarChar(20)
  estado             String         @default("disponible") @db.VarChar(20)
  fechaCreacion      DateTime       @default(now()) @db.Timestamp(0)
  fechaActualizacion DateTime       @updatedAt @db.Timestamp(0)
  favoritos          Favorito[]
  fotosInmueble      FotoInmueble[]
  propietario        Usuario        @relation(fields: [propietarioId], references: [id], onDelete: Cascade)
  intereses          Interes[]
  resenas            Resena[]
=======
  id            String   @id @default(uuid()) @db.Uuid
  ownerId       String   @db.Uuid
  title         String   @db.VarChar(255)
  description   String?  @db.Text
  address       String?  @db.VarChar(500)
  city          String   @default("Cochabamba") @db.VarChar(100)
  bedrooms      Int?
  bathrooms     Int?
  areaM2        Decimal? @db.Decimal(10, 2)
  price         Decimal  @db.Decimal(12, 2)
  operationType String   @db.VarChar(20) // 'alquiler' o 'anticretico'
  status        String   @default("disponible") @db.VarChar(20) // 'disponible', 'alquilado'
  createdAt     DateTime @default(now()) @db.Timestamp(0)
  updatedAt     DateTime @updatedAt @db.Timestamp(0)

  // Relaciones
  owner          Usuario        @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  interests      Interes[]
  propertyPhotos FotoInmueble[]
  reviews        Resena[]
  favorites      Favorito[]
>>>>>>> Stashed changes

  @@index([city])
  @@index([status])
  @@index([price])
  @@index([ownerId])
  @@map("properties")
}

model Interes {
<<<<<<< Updated upstream
  id            String    @id @default(uuid()) @db.Uuid
  usuarioId     String    @db.Uuid
  inmuebleId    String    @db.Uuid
  mensaje       String?
  estado        String    @default("pendiente") @db.VarChar(20)
  fechaCreacion DateTime  @default(now()) @db.Timestamp(0)
  inmueble      Inmueble  @relation(fields: [inmuebleId], references: [id], onDelete: Cascade)
  usuario       Usuario   @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  mensajes      Mensaje[]
=======
  id         String   @id @default(uuid()) @db.Uuid
  userId     String   @db.Uuid
  propertyId String   @db.Uuid
  message    String?  @db.Text
  status     String   @default("pendiente") @db.VarChar(20)
  createdAt  DateTime @default(now()) @db.Timestamp(0)

  // Relaciones
  user     Usuario   @relation(fields: [userId], references: [id], onDelete: Cascade)
  property Inmueble  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  messages Mensaje[]
>>>>>>> Stashed changes

  @@index([userId])
  @@index([propertyId])
  @@map("interests")
}

model Mensaje {
<<<<<<< Updated upstream
  id            BigInt   @id @default(autoincrement())
  emisorId      String   @db.Uuid
  receptorId    String   @db.Uuid
  interesId     String?  @db.Uuid
  contenido     String
  leido         Boolean  @default(false)
  fechaCreacion DateTime @default(now()) @db.Timestamp(0)
  emisor        Usuario  @relation("MensajesEmisor", fields: [emisorId], references: [id], onDelete: Cascade)
  interes       Interes? @relation(fields: [interesId], references: [id])
  receptor      Usuario  @relation("MensajesReceptor", fields: [receptorId], references: [id], onDelete: Cascade)
=======
  id         BigInt   @id @default(autoincrement())
  senderId   String   @db.Uuid
  receiverId String   @db.Uuid
  interestId String?  @db.Uuid
  content    String   @db.Text
  read       Boolean  @default(false)
  createdAt  DateTime @default(now()) @db.Timestamp(0)

  // Relaciones
  sender   Usuario  @relation("MensajesEmisor", fields: [senderId], references: [id], onDelete: Cascade)
  receiver Usuario  @relation("MensajesReceptor", fields: [receiverId], references: [id], onDelete: Cascade)
  interest Interes? @relation(fields: [interestId], references: [id], onDelete: SetNull)
>>>>>>> Stashed changes

  @@index([senderId, receiverId])
  @@index([interestId])
  @@map("messages")
}

model FotoInmueble {
<<<<<<< Updated upstream
  id            BigInt   @id @default(autoincrement())
  inmuebleId    String   @db.Uuid
  url           String
  orden         Int?
  fechaCreacion DateTime @default(now()) @db.Timestamp(0)
  inmueble      Inmueble @relation(fields: [inmuebleId], references: [id], onDelete: Cascade)
=======
  id         BigInt   @id @default(autoincrement())
  propertyId String   @db.Uuid
  url        String   @db.Text
  order      Int?
  createdAt  DateTime @default(now()) @db.Timestamp(0)

  // Relaciones
  property Inmueble @relation(fields: [propertyId], references: [id], onDelete: Cascade)
>>>>>>> Stashed changes

  @@index([propertyId])
  @@map("property_photos")
}

model Resena {
<<<<<<< Updated upstream
  id            BigInt   @id @default(autoincrement())
  usuarioId     String   @db.Uuid
  inmuebleId    String   @db.Uuid
  contenido     String
  calificacion  Int
  fechaCreacion DateTime @default(now()) @db.Timestamp(0)
  inmueble      Inmueble @relation(fields: [inmuebleId], references: [id], onDelete: Cascade)
  usuario       Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
=======
  id         BigInt   @id @default(autoincrement())
  userId     String   @db.Uuid
  propertyId String   @db.Uuid
  content    String   @db.Text
  rating     Int      @db.Integer
  createdAt  DateTime @default(now()) @db.Timestamp(0)

  // Relaciones
  user     Usuario  @relation(fields: [userId], references: [id], onDelete: Cascade)
  property Inmueble @relation(fields: [propertyId], references: [id], onDelete: Cascade)
>>>>>>> Stashed changes

  @@index([userId])
  @@index([propertyId])
  @@map("reviews")
}

model Notificacion {
<<<<<<< Updated upstream
  id            String   @id @default(uuid()) @db.Uuid
  usuarioId     String   @db.Uuid
  tipo          String   @db.VarChar(50)
  titulo        String   @db.VarChar(255)
  contenido     String
  leido         Boolean  @default(false)
  metadata      Json?
  fechaCreacion DateTime @default(now()) @db.Timestamp(0)
  usuario       Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
=======
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  type      String   @db.VarChar(50)
  title     String   @db.VarChar(255)
  content   String   @db.Text
  read      Boolean  @default(false)
  metadata  Json?
  createdAt DateTime @default(now()) @db.Timestamp(0)

  // Relaciones
  user Usuario @relation(fields: [userId], references: [id], onDelete: Cascade)
>>>>>>> Stashed changes

  @@index([userId])
  @@index([read])
  @@map("notifications")
}

model Reporte {
<<<<<<< Updated upstream
  id            String   @id @default(uuid()) @db.Uuid
  usuarioId     String   @db.Uuid
  tipo          String   @db.VarChar(50)
  parametros    Json?
  archivoUrl    String?  @db.VarChar(500)
  fechaCreacion DateTime @default(now()) @db.Timestamp(0)
  usuario       Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
=======
  id         String   @id @default(uuid()) @db.Uuid
  userId     String   @db.Uuid
  type       String   @db.VarChar(50)
  parameters Json?
  fileUrl    String?  @db.VarChar(500)
  createdAt  DateTime @default(now()) @db.Timestamp(0)

  // Relaciones
  user Usuario @relation(fields: [userId], references: [id], onDelete: Cascade)
>>>>>>> Stashed changes

  @@index([userId])
  @@map("reports")
}

model Favorito {
<<<<<<< Updated upstream
  id            String   @id @default(uuid()) @db.Uuid
  usuarioId     String   @db.Uuid
  inmuebleId    String   @db.Uuid
  fechaCreacion DateTime @default(now()) @db.Timestamp(0)
  inmueble      Inmueble @relation(fields: [inmuebleId], references: [id], onDelete: Cascade)
  usuario       Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
=======
  id         String   @id @default(uuid()) @db.Uuid
  userId     String   @db.Uuid
  propertyId String   @db.Uuid
  createdAt  DateTime @default(now()) @db.Timestamp(0)

  // Relaciones
  user     Usuario  @relation(fields: [userId], references: [id], onDelete: Cascade)
  property Inmueble @relation(fields: [propertyId], references: [id], onDelete: Cascade)
>>>>>>> Stashed changes

  @@unique([userId, propertyId])
  @@index([userId])
  @@index([propertyId])
  @@map("favorites")
}

model BusquedaGuardada {
<<<<<<< Updated upstream
  id                 String   @id @default(uuid()) @db.Uuid
  usuarioId          String   @db.Uuid
  parametrosBusqueda Json
  nombreBusqueda     String?  @db.VarChar(255)
  fechaCreacion      DateTime @default(now()) @db.Timestamp(0)
  usuario            Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
=======
  id               String   @id @default(uuid()) @db.Uuid
  userId           String   @db.Uuid
  searchParameters Json
  searchName       String?  @db.VarChar(255)
  createdAt        DateTime @default(now()) @db.Timestamp(0)

  // Relaciones
  user Usuario @relation(fields: [userId], references: [id], onDelete: Cascade)
>>>>>>> Stashed changes

  @@index([userId])
  @@map("saved_searches")
}

model UserPreference {
  id            String   @id @default(uuid()) @db.Uuid
  userId        String   @unique @db.Uuid
  propertyTypes String[]
  modality      String?
  locations     String[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user Usuario @relation("UserPreferences", fields: [userId], references: [id])

  @@map("user_preferences")
}
