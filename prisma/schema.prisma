generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Usuario {
  id                   String             @id @default(uuid()) @db.Uuid
  googleId             String?            @unique
  fotoPerfil           String?
  correoElectronico    String             @unique @db.VarChar(255)
  contrasenaHash       String?
  nombreCompleto       String?            @db.VarChar(255)
  telefono             String?            @db.VarChar(20)
  rol                  String             @default("usuario") @db.VarChar(20)
  estadoVerificacion   String             @default("pendiente") @db.VarChar(20)
  refreshToken         String?
  fechaCreacion        DateTime           @default(now()) @db.Timestamp(0)
  fechaActualizacion   DateTime           @updatedAt @db.Timestamp(0)
  busquedasGuardadas   BusquedaGuardada[]
  favoritos            Favorito[]
  inmueblesPropietario Inmueble[]
  Intereses            Interes[]
  mensajesEmitidos     Mensaje[]          @relation("MensajesEmisor")
  mensajesRecibidos    Mensaje[]          @relation("MensajesReceptor")
  notificaciones       Notificacion[]
  reportes             Reporte[]
  resenas              Resena[]
  preferences         UserPreference?    @relation("UserPreferences")
  @@map("usuarios")
}

model Inmueble {
  id                 String         @id @default(uuid()) @db.Uuid
  propietarioId      String         @db.Uuid
  titulo             String         @db.VarChar(255)
  descripcion        String?
  direccion          String?        @db.VarChar(500)
  ciudad             String         @default("Cochabamba") @db.VarChar(100)
  dormitorios        Int?
  banos              Int?
  areaM2             Decimal?       @db.Decimal(10, 2)
  precio             Decimal        @db.Decimal(12, 2)
  tipoOperacion      String         @db.VarChar(20)
  estado             String         @default("disponible") @db.VarChar(20)
  fechaCreacion      DateTime       @default(now()) @db.Timestamp(0)
  fechaActualizacion DateTime       @updatedAt @db.Timestamp(0)
  favoritos          Favorito[]
  fotosInmueble      FotoInmueble[]
  propietario        Usuario        @relation(fields: [propietarioId], references: [id], onDelete: Cascade)
  intereses          Interes[]
  resenas            Resena[]

  @@index([ciudad])
  @@index([estado])
  @@index([precio])
  @@index([propietarioId])
  @@map("inmuebles")
}

model Interes {
  id            String    @id @default(uuid()) @db.Uuid
  usuarioId     String    @db.Uuid
  inmuebleId    String    @db.Uuid
  mensaje       String?
  estado        String    @default("pendiente") @db.VarChar(20)
  fechaCreacion DateTime  @default(now()) @db.Timestamp(0)
  inmueble      Inmueble  @relation(fields: [inmuebleId], references: [id], onDelete: Cascade)
  usuario       Usuario   @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  mensajes      Mensaje[]

  @@index([usuarioId])
  @@index([inmuebleId])
  @@map("intereses")
}

model Mensaje {
  id            BigInt   @id @default(autoincrement())
  emisorId      String   @db.Uuid
  receptorId    String   @db.Uuid
  interesId     String?  @db.Uuid
  contenido     String
  leido         Boolean  @default(false)
  fechaCreacion DateTime @default(now()) @db.Timestamp(0)
  emisor        Usuario  @relation("MensajesEmisor", fields: [emisorId], references: [id], onDelete: Cascade)
  interes       Interes? @relation(fields: [interesId], references: [id])
  receptor      Usuario  @relation("MensajesReceptor", fields: [receptorId], references: [id], onDelete: Cascade)

  @@index([emisorId, receptorId])
  @@index([interesId])
  @@map("mensajes")
}

model FotoInmueble {
  id            BigInt   @id @default(autoincrement())
  inmuebleId    String   @db.Uuid
  url           String
  orden         Int?
  fechaCreacion DateTime @default(now()) @db.Timestamp(0)
  inmueble      Inmueble @relation(fields: [inmuebleId], references: [id], onDelete: Cascade)

  @@index([inmuebleId])
  @@map("fotos_inmueble")
}

model Resena {
  id            BigInt   @id @default(autoincrement())
  usuarioId     String   @db.Uuid
  inmuebleId    String   @db.Uuid
  contenido     String
  calificacion  Int
  fechaCreacion DateTime @default(now()) @db.Timestamp(0)
  inmueble      Inmueble @relation(fields: [inmuebleId], references: [id], onDelete: Cascade)
  usuario       Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@index([usuarioId])
  @@index([inmuebleId])
  @@map("resenas")
}

model Notificacion {
  id            String   @id @default(uuid()) @db.Uuid
  usuarioId     String   @db.Uuid
  tipo          String   @db.VarChar(50)
  titulo        String   @db.VarChar(255)
  contenido     String
  leido         Boolean  @default(false)
  metadata      Json?
  fechaCreacion DateTime @default(now()) @db.Timestamp(0)
  usuario       Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@index([usuarioId])
  @@index([leido])
  @@map("notificaciones")
}

model Reporte {
  id            String   @id @default(uuid()) @db.Uuid
  usuarioId     String   @db.Uuid
  tipo          String   @db.VarChar(50)
  parametros    Json?
  archivoUrl    String?  @db.VarChar(500)
  fechaCreacion DateTime @default(now()) @db.Timestamp(0)
  usuario       Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@index([usuarioId])
  @@map("reportes")
}

model Favorito {
  id            String   @id @default(uuid()) @db.Uuid
  usuarioId     String   @db.Uuid
  inmuebleId    String   @db.Uuid
  fechaCreacion DateTime @default(now()) @db.Timestamp(0)
  inmueble      Inmueble @relation(fields: [inmuebleId], references: [id], onDelete: Cascade)
  usuario       Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@unique([usuarioId, inmuebleId])
  @@index([usuarioId])
  @@index([inmuebleId])
  @@map("favoritos")
}

model BusquedaGuardada {
  id                 String   @id @default(uuid()) @db.Uuid
  usuarioId          String   @db.Uuid
  parametrosBusqueda Json
  nombreBusqueda     String?  @db.VarChar(255)
  fechaCreacion      DateTime @default(now()) @db.Timestamp(0)
  usuario            Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@index([usuarioId])
  @@map("busquedas_guardadas")
}
model UserPreference {
  id             String   @id @default(uuid()) @db.Uuid
  userId         String   @unique @db.Uuid
  propertyTypes  String[]
  modality       String?
  locations      String[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user          Usuario    @relation("UserPreferences", fields: [userId], references: [id])
  @@map("user_preferences")
}