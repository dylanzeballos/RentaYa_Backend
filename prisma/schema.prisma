generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Usuario {
  id                String   @id @default(uuid()) @db.Uuid
  googleId          String?  @unique
  profilePhoto      String?  
  email             String   @unique @db.VarChar(255)
  passwordHash      String?  
  fullName          String?  @db.VarChar(255)
  phone             String?  @db.VarChar(20)
  role              String   @default("usuario")@db.VarChar(20) // 'propietario' o 'inquilino'
  verificationStatus String   @default("pendiente") @db.VarChar(20)
  refreshToken      String?
  createdAt         DateTime @default(now()) @db.Timestamp(0)
  updatedAt         DateTime @updatedAt @db.Timestamp(0)

  // Relaciones
  ownedProperties   Inmueble[]
  interests         Interes[]
  sentMessages      Mensaje[]          @relation("MensajesEmisor")
  receivedMessages  Mensaje[]          @relation("MensajesReceptor")
  reviews           Resena[]
  notifications     Notificacion[]
  reports           Reporte[]
  favorites         Favorito[]
  savedSearches     BusquedaGuardada[]
  userPreference    UserPreference?    @relation("UserPreferences")

  @@map("users")
}

model Inmueble {
  id              String   @id @default(uuid()) @db.Uuid
  ownerId         String   @db.Uuid
  title           String   @db.VarChar(255)
  description     String?  @db.Text
  address         String?  @db.VarChar(500)
  city            String   @default("Cochabamba") @db.VarChar(100)
  propertyType    String?  @db.VarChar(50) // 'casa', 'departamento', 'oficina', 'terreno'
  bedrooms        Int?
  bathrooms       Int?
  areaM2          Decimal? @db.Decimal(10, 2)
  price           Decimal  @db.Decimal(12, 2)
  operationType   String   @db.VarChar(20) // 'alquiler' o 'anticretico'
  status          String   @default("disponible") @db.VarChar(20) // 'disponible', 'alquilado'
  createdAt       DateTime @default(now()) @db.Timestamp(0)
  updatedAt       DateTime @updatedAt @db.Timestamp(0)

  // Relaciones
  owner         Usuario        @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  interests     Interes[]
  propertyPhotos FotoInmueble[]
  reviews       Resena[]
  favorites     Favorito[]

  @@index([city])
  @@index([status])
  @@index([price])
  @@index([ownerId])
  @@map("properties")
}

model Interes {
  id         String   @id @default(uuid()) @db.Uuid
  userId     String   @db.Uuid
  propertyId String   @db.Uuid
  message    String?  @db.Text
  status     String   @default("pendiente") @db.VarChar(20)
  createdAt  DateTime @default(now()) @db.Timestamp(0)

  // Relaciones
  user     Usuario   @relation(fields: [userId], references: [id], onDelete: Cascade)
  property Inmueble  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  messages Mensaje[]

  @@index([userId])
  @@index([propertyId])
  @@map("interests")
}

model Mensaje {
  id         BigInt   @id @default(autoincrement())
  senderId   String   @db.Uuid
  receiverId String   @db.Uuid
  interestId String?  @db.Uuid
  content    String   @db.Text
  read       Boolean  @default(false)
  createdAt  DateTime @default(now()) @db.Timestamp(0)

  // Relaciones
  sender   Usuario  @relation("MensajesEmisor", fields: [senderId], references: [id], onDelete: Cascade)
  receiver Usuario  @relation("MensajesReceptor", fields: [receiverId], references: [id], onDelete: Cascade)
  interest Interes? @relation(fields: [interestId], references: [id], onDelete: SetNull)

  @@index([senderId, receiverId])
  @@index([interestId])
  @@map("messages")
}

model FotoInmueble {
  id         BigInt   @id @default(autoincrement())
  propertyId String   @db.Uuid
  url        String   @db.Text
  order      Int?
  createdAt  DateTime @default(now()) @db.Timestamp(0)

  // Relaciones
  property Inmueble @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@index([propertyId])
  @@map("property_photos")
}

model Resena {
  id         BigInt   @id @default(autoincrement())
  userId     String   @db.Uuid
  propertyId String   @db.Uuid
  content    String   @db.Text
  rating     Int      @db.Integer
  createdAt  DateTime @default(now()) @db.Timestamp(0)

  // Relaciones
  user     Usuario  @relation(fields: [userId], references: [id], onDelete: Cascade)
  property Inmueble @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([propertyId])
  @@map("reviews")
}

model Notificacion {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  type      String   @db.VarChar(50)
  title     String   @db.VarChar(255)
  content   String   @db.Text
  read      Boolean  @default(false)
  metadata  Json?
  createdAt DateTime @default(now()) @db.Timestamp(0)

  // Relaciones
  user Usuario @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([read])
  @@map("notifications")
}

model Reporte {
  id         String   @id @default(uuid()) @db.Uuid
  userId     String   @db.Uuid
  type       String   @db.VarChar(50)
  parameters Json?
  fileUrl    String?  @db.VarChar(500)
  createdAt  DateTime @default(now()) @db.Timestamp(0)

  // Relaciones
  user Usuario @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("reports")
}

model Favorito {
  id         String   @id @default(uuid()) @db.Uuid
  userId     String   @db.Uuid
  propertyId String   @db.Uuid
  createdAt  DateTime @default(now()) @db.Timestamp(0)

  // Relaciones
  user     Usuario  @relation(fields: [userId], references: [id], onDelete: Cascade)
  property Inmueble @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@unique([userId, propertyId])
  @@index([userId])
  @@index([propertyId])
  @@map("favorites")
}

model BusquedaGuardada {
  id               String   @id @default(uuid()) @db.Uuid
  userId           String   @db.Uuid
  searchParameters Json
  searchName       String?  @db.VarChar(255)
  createdAt        DateTime @default(now()) @db.Timestamp(0)

  // Relaciones
  user Usuario @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("saved_searches")
}
model UserPreference {
  id             String   @id @default(uuid()) @db.Uuid
  userId         String   @unique @db.Uuid
  propertyTypes  String[]
  modality       String?
  locations      String[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user          Usuario    @relation("UserPreferences", fields: [userId], references: [id])
  @@map("user_preferences")
}